unit SMR;

interface

uses
  PsyBaseStats;

{type float = extended;

const      PI: float =               3.141592653589793e+00;
           ONE_ON_PI: float =        3.183098861837907e-01;
           ONE_ON_SQRT_PI: float =   5.641895835477563e-01;
           TWO_ON_PI: float =        6.366197723675814e-01;
           TWO_ON_SQRT_PI: float =   1.128379167095513e+00;
           LNSQR2PI: float =         9.189385332046727e-01;

type BrentVec = array [1..5] of float;

type BrentFn = function(x: float; arglist: BrentVec): float;

function LnFactorial(x: float): float;
function even(i: integer): boolean;
function BrentZero(Fz: BrentFn; a, b: float;
                   arglist: BrentVec; macheps, tolerance: float): float;
}

{ tau = 0 is used when you want df = infinity                   }
{ Wishart find alpha for CV: alpha := SmrPercentile(p,q,tau,cv) }
{ Wishart find CV for alpha: cv := SmrCriticalValue(p,q,0,alpha)}
{ SMR find alpha for CV: alpha := SmrPercentile(p,q,tau,alpha)  }
{ SMR find CV for alpha: cv := SmrCriticalValue(p,q,tau,alpha)  }

function SmrCriticalValue(p, q, tau: integer; a: float): float;
function SmrPercentile(p, q, tau: integer; a: float): float;

implementation

//type string128 = string[128];

type ib = array[0..100] of float;

type
   array96 = array[1..96] of float;
   array128 = array[1..128] of float;
   array256 = array[1..256] of float;

type errorstr = string[128];
type errorrecord = record
     calledfrom: errorstr;
     errornum: integer;
     errormsg: errorstr;
     end;
{
  Standard procedures used by SMR and F
}

procedure SetErrorTrap(called: errorstr); {
---------------------- This procedure is called at the start of any
function/procedure which might encounter an error due either to
illegal parameters or a numerical error.
If the error is encountered then the error trap is sprung.
It is up to the calling block to check.
-------------------------------------------}

begin
{   with PDFError do
      begin
      calledfrom := called;
      errornum := 0;
      errormsg := 'Successful';
      end;}
end;

procedure SpringErrorTrap(errnum: integer; errmsg: errorstr);
begin
{   with PDFError do
      begin
      errornum := errnum;
      errormsg := errmsg;
      end;}
end;

(*
function Min(x, y: float): float;
begin
if x < y then
    Min := x
else
    Min := y
end;

function Min_Int(x, y: integer): integer;
begin
if x < y then
    Min_Int := x
else
    Min_Int := y
end;


function Max(x, y: float): float;
begin
if x > y then
    Max := x
else
    Max := y
end;

function Max_Int(x, y: integer): integer;
begin
if x > y then
    Max_Int := x
else
    Max_Int := y
end;

function Sign(x: float): integer;
begin
if x < 0 then
    Sign := 0
else
    Sign := 1
end; { Sign }

function IsInteger(x: float): boolean;
begin
if frac(x) = 0.0 then
   IsInteger := true
else
   IsInteger := false
end; { IsInteger }

function LnGamma(xx: float): float; {
---------------- Alan Miller's version on Netlib }
var
   j, m, n: integer;
   lg, tmp: float;

const
     a: array[1..9] of float =
     (  0.9999999999995183,
        676.5203681218835,
        -1259.139216722289,
        771.3234287757674,
        -176.6150291498386,
        12.50734324009056,
        -0.1385710331296526,
        0.9934937113930748e-05,
        0.1659470187408462e-06
     );

{ The following table contains Ln[Gamma(x)] for x = 0.5 by 0.5 to 100.0
  Values calculated in Maple V }

     tablemin = 0.5;  tablemax = 100.0;
     table: array[0..100,0..1] of float =
     (( 0.0000000000000000e+00 ,  5.7236494292470008e-01 ),
      ( 0.0000000000000000e-01 , -1.2078223763524522e-01 ),
      ( 0.0000000000000000e-01 ,  2.8468287047291915e-01 ),
      ( 6.9314718055994530e-01 ,  1.2009736023470742e+00 ),
      ( 1.7917594692280550e+00 ,  2.4537365708424422e+00 ),
      ( 3.1780538303479456e+00 ,  3.9578139676187162e+00 ),
      ( 4.7874917427820459e+00 ,  5.6625620598571415e+00 ),
      ( 6.5792512120101009e+00 ,  7.5343642367587329e+00 ),
      ( 8.5251613610654143e+00 ,  9.5492672573009977e+00 ),
      ( 1.0604602902745250e+01 ,  1.1689333420797268e+01 ),
      ( 1.2801827480081469e+01 ,  1.3940625219403763e+01 ),
      ( 1.5104412573075515e+01 ,  1.6292000476567241e+01 ),
      ( 1.7502307845873885e+01 ,  1.8734347511936445e+01 ),
      ( 1.9987214495661886e+01 ,  2.1260076156244701e+01 ),
      ( 2.2552163853123422e+01 ,  2.3862765841689084e+01 ),
      ( 2.5191221182738681e+01 ,  2.6536914491115613e+01 ),
      ( 2.7899271383840891e+01 ,  2.9277754515040814e+01 ),
      ( 3.0671860106080672e+01 ,  3.2081114895947349e+01 ),
      ( 3.3505073450136888e+01 ,  3.4943315776876817e+01 ),
      ( 3.6395445208033053e+01 ,  3.7861086508961096e+01 ),
      ( 3.9339884187199494e+01 ,  4.0831500974530798e+01 ),
      ( 4.2335616460753485e+01 ,  4.3851925860675160e+01 ),
      ( 4.5380138898476908e+01 ,  4.6919978795808777e+01 ),
      ( 4.8471181351835223e+01 ,  5.0033494105019152e+01 ),
      ( 5.1606675567764373e+01 ,  5.3190494526169265e+01 ),
      ( 5.4784729398112319e+01 ,  5.6389167643719946e+01 ),
      ( 5.8003605222980519e+01 ,  5.9627846095884327e+01 ),
      ( 6.1261701761002001e+01 ,  6.2904990828876503e+01 ),
      ( 6.4557538627006331e+01 ,  6.6219176833549029e+01 ),
      ( 6.7889743137181534e+01 ,  6.9569080920823634e+01 ),
      ( 7.1257038967168009e+01 ,  7.2953471184169408e+01 ),
      ( 7.4658236348830164e+01 ,  7.6371197867782774e+01 ),
      ( 7.8092223553315310e+01 ,  7.9821185413614361e+01 ),
      ( 8.1557959456115037e+01 ,  8.3302425502950053e+01 ),
      ( 8.5054467017581517e+01 ,  8.6813970941781074e+01 ),
      ( 8.8580827542197678e+01 ,  9.0354930265818388e+01 ),
      ( 9.2136175603687092e+01 ,  9.3924462962299758e+01 ),
      ( 9.5719694542143202e+01 ,  9.7521775222888204e+01 ),
      ( 9.9330612454787426e+01 ,  1.0114611615586456e+02 ),
      ( 1.0296819861451381e+02 ,  1.0479677439715830e+02 ),
      ( 1.0663176026064345e+02 ,  1.0847307506906538e+02 ),
      ( 1.1032063971475739e+02 ,  1.1217437704317787e+02 ),
      ( 1.1403421178146170e+02 ,  1.1590007047041453e+02 ),
      ( 1.1777188139974507e+02 ,  1.1964957454634490e+02 ),
      ( 1.2153308151543863e+02 ,  1.2342233548443953e+02 ),
      ( 1.2531727114935689e+02 ,  1.2721782467361173e+02 ),
      ( 1.2912393363912721e+02 ,  1.3103553699956863e+02 ),
      ( 1.3295257503561630e+02 ,  1.3487498931216194e+02 ),
      ( 1.3680272263732636e+02 ,  1.3873571902320254e+02 ),
      ( 1.4067392364823425e+02 ,  1.4261728282114598e+02 ),
      ( 1.4456574394634488e+02 ,  1.4651925549072062e+02 ),
      ( 1.4847776695177303e+02 ,  1.5044122882700194e+02 ),
      ( 1.5240959258449735e+02 ,  1.5438281063467163e+02 ),
      ( 1.5636083630307878e+02 ,  1.5834362380426920e+02 ),
      ( 1.6033112821663090e+02 ,  1.6232330545817117e+02 ),
      ( 1.6432011226319518e+02 ,  1.6632150615984036e+02 ),
      ( 1.6832744544842765e+02 ,  1.7033788918059275e+02 ),
      ( 1.7235279713916280e+02 ,  1.7437212981874515e+02 ),
      ( 1.7639584840699735e+02 ,  1.7842391476654845e+02 ),
      ( 1.8045629141754377e+02 ,  1.8249294152078626e+02 ),
      ( 1.8453382886144949e+02 ,  1.8657891783333785e+02 ),
      ( 1.8862817342367159e+02 ,  1.9068156119837464e+02 ),
      ( 1.9273904728784490e+02 ,  1.9480059837318712e+02 ),
      ( 1.9686618167288999e+02 ,  1.9893576492992947e+02 ),
      ( 2.0100931639928152e+02 ,  2.0308680483582812e+02 ),
      ( 2.0516819948264119e+02 ,  2.0725347005962984e+02 ),
      ( 2.0934258675253683e+02 ,  2.1143552020227105e+02 ),
      ( 2.1353224149456326e+02 ,  2.1563272214993286e+02 ),
      ( 2.1773693411395422e+02 ,  2.1984484974781134e+02 ),
      ( 2.2195644181913033e+02 ,  2.2407168349307952e+02 ),
      ( 2.2619054832372759e+02 ,  2.2831301024565027e+02 ),
      ( 2.3043904356577695e+02 ,  2.3256862295546849e+02 ),
      ( 2.3470172344281826e+02 ,  2.3683832040516845e+02 ),
      ( 2.3897838956183432e+02 ,  2.4112190696702908e+02 ),
      ( 2.4326884900298271e+02 ,  2.4541919237324787e+02 ),
      ( 2.4757291409618688e+02 ,  2.4972999149863339e+02 ),
      ( 2.5189040220972319e+02 ,  2.5405412415488837e+02 ),
      ( 2.5622113555000952e+02 ,  2.5839141489572086e+02 ),
      ( 2.6056494097186320e+02 ,  2.6274169283208016e+02 ),
      ( 2.6492164979855280e+02 ,  2.6710479145686852e+02 ),
      ( 2.6929109765101982e+02 ,  2.7148054847852881e+02 ),
      ( 2.7367312428569370e+02 ,  2.7586880566295333e+02 ),
      ( 2.7806757344036614e+02 ,  2.8026940868320014e+02 ),
      ( 2.8247429268763039e+02 ,  2.8468220697654078e+02 ),
      ( 2.8689313329542699e+02 ,  2.8910705360839759e+02 ),
      ( 2.9132395009427030e+02 ,  2.9354380514276072e+02 ),
      ( 2.9576660135076062e+02 ,  2.9799232151870343e+02 ),
      ( 3.0022094864701413e+02 ,  3.0245246593264126e+02 ),
      ( 3.0468685676566871e+02 ,  3.0692410472600483e+02 ),
      ( 3.0916419358014692e+02 ,  3.1140710727801872e+02 ),
      ( 3.1365282994987906e+02 ,  3.1590134590329953e+02 ),
      ( 3.1815263962020932e+02 ,  3.2040669575400541e+02 ),
      ( 3.2266349912672617e+02 ,  3.2492303472628688e+02 ),
      ( 3.2718528770377521e+02 ,  3.2945024337080526e+02 ),
      ( 3.3171788719692847e+02 ,  3.3398820480709990e+02 ),
      ( 3.3626118197919847e+02 ,  3.3853680464159960e+02 ),
      ( 3.4081505887079901e+02 ,  3.4309593088908628e+02 ),
      ( 3.4537940706226685e+02 ,  3.4766547389743122e+02 ),
      ( 3.4995411804077023e+02 ,  3.5224532627543503e+02 ),
      ( 3.5453908551944080e+02 ,  3.5683538282361307e+02 ),
      ( 3.5913420536957539e+02 ,  0.0000000000000000e+00 ));



begin

{ use table if possible }
if (xx >= tablemin) and (xx <= tablemax) then
   if isinteger(xx) or (frac(xx) = 0.5) then
      begin
      m := trunc(xx);
      if frac(xx) = 0.5 then n := 1 else n := 0;
      LnGamma := table[m,n];
      exit
      end;


lg  := 0.0;
tmp := xx + 7.0;

for j := 9 downto 2 do
begin
    lg  := lg + a[j]/tmp;
    tmp := tmp - 1;
end;


lg := lg + a[1];
LnGamma := Ln(lg) + LNSQR2PI - (xx + 6.5) + (xx - 0.5) * Ln(xx + 6.5);

end; { LnGamma }
*)
function Gamma(xx: float): float;
begin
    Gamma := exp(LnGamma(xx))
end; { Gamma }
(*
function even(i: integer): boolean;
begin
   even := not odd(i)
end; { even }

function LnFactorial(x: float): float;

const
     TableSize = 12;
     Table: array[1..TableSize] of float =
     (      1.00000000e+00,
            2.00000000e+00,
            6.00000000e+00,
            2.40000000e+01,
            1.20000000e+02,
            7.20000000e+02,
            5.04000000e+03,
            4.03200000e+03,
            3.62880000e+05,
            3.62880000e+06,
            3.99168000e+07,
            4.79001600e+08
      );

begin
if x = 0.0 then
   LnFactorial := 0.0
else
   if (IsInteger(x) and (trunc(x) <= TableSize)) then
      LnFactorial := Ln(Table[trunc(x)])
   else
       LnFactorial := LnGamma(x + 1.0)
end; { LnFactorial }
*)
(* -----------------------------------------------------
   NORMAL INTEGRAL
   Algorithm AS66 Applied Statistics (1973) vol.22, no.3
-------------------------------------------------------- *)

function NormalIntegral(x: float; upper: boolean): float;

const
    zero:   float = 0.0;
    one:    float = 1.0;
    half:   float = 0.5;
    con:    float = 1.28;
    ltone:  float = 7.0;
    utzero: float = 18.66;
    p:      float = 0.398942280444;
    q:      float = 0.39990348504;
    r:      float = 0.398942280385;
    a1:     float = 5.75885480458;
    a2:     float = 2.62433121679;
    a3:     float = 5.92885724438;
    b1:     float = -29.8213557807;
    b2:     float = 48.6959930692;
    c1:     float = -3.8052e-08;
    c2:     float = 3.98064794e-04;
    c3:     float = -0.151679116635;
    c4:     float = 4.8385912808;
    c5:     float = 0.742380924027;
    c6:     float = 3.99019417011;
    d1:     float = 1.00000615302;
    d2:     float = 1.98615381364;
    d3:     float = 5.29330324926;
    d4:     float = -15.1508972451;
    d5:     float = 30.789933034;

var
   up: boolean;
   z, y, fn_val: float;

begin

up := upper;
z  := x;

if z < zero then
   begin
   up := not up;
   z  := -z
   end;


if (z <= ltone) or ((z <= utzero) and up) then
       begin
       y := half*z*z;
       if z <= con then
          fn_val := half - z*(p-q*y/(y+a1+b1/(y+a2+b2/(y+a3))))
       else
          fn_val := r*exp(-y)/(z+c1+d1/(z+c2+d2/(z+c3+d3/(z+c4+d4/(z+c5+d5/(z+c6))))))
       end
   else
       fn_val := zero;

if not up then
   NormalIntegral := one - fn_val
else
   NormalIntegral := fn_val
end;

(* ---------------------------------------------------------
   INCOMPLETE GAMMA INTEGRAL
   Algorithm AS239 Applied Statistics, 1988, 37(3), 466-473.
   --------------------------------------------------------- *)

function IncompleteGamma(x, p: float): float;
const
    zero:   float = 0.0;
    one:    float = 1.0;
    two:    float = 2.0;
    three:  float = 3.0;
    nine:   float = 9.0;
    oflo:   float = 1.0e+30;
    tol:    float = 1.0e-07;
    plimit: float = 1000.0;
    xbig:   float = 1.0e+06;
    elimit: float = -88.0e+00;

var
    loop: boolean;
    pn1, pn2, pn3, pn4, pn5, pn6, arg,c, rn, a, b, an, funval: float;

begin
    IncompleteGamma := zero;
    if x = zero then
       IncompleteGamma := zero
    else
       if p > plimit then { normal approximation }
           begin
           pn1 := three * sqrt(p) * (exp((one/three)*Ln(x/p)) + one/(nine*p) - one);
           IncompleteGamma := NormalIntegral(pn1,false)
           end
       else if x > xbig then { X extremely large compared to P }
           begin
           IncompleteGamma := one
           end
       else if ((x <= 1) or (x < p)) then { Pearson's expansion }
           begin
           arg := p * Ln(x) - x - LnGamma(p+one);
           c := one;
           funval := one;
           a := p;
           while c > tol do
               begin
               a := a + one;
               c := c * x/a;
               funval := funval + c
               end;
           arg := arg + Ln(funval);
           IncompleteGamma := zero;
           if arg > elimit then
               IncompleteGamma := exp(arg)
           end
       else { Continued fraction }
           begin
           arg := p * Ln(x) - x - LnGamma(p);
           a := one - p;
           b := a + x + one;
           c := zero;
           pn1 := one;
           pn2 := x;
           pn3 := x + one;
           pn4 := x * b;
           funval := pn3/pn4;
           loop := true;
           while loop do
               begin
               a := a + one;
               b := b + two;
               c := c + one;
               an := a * c;
               pn5 := b*pn3 - an*pn1;
               pn6 := b*pn4 - an*pn2;
               if abs(pn6) > zero then
                   begin
                   rn := pn5/pn6;
                   if abs(funval - rn) <= Min(tol,tol*rn) then
                       loop := false
                   else
                       funval := rn
                   end;
               if loop then
                   begin
                   pn1 := pn3;  pn2 := pn4;
                   pn3 := pn5;  pn4 := pn6;
                   if abs(pn5) >= oflo then
                       begin
                       pn1 := pn1/oflo;  pn2 := pn2/oflo;
                       pn3 := pn3/oflo;  pn4 := pn4/oflo
                       end
                   end
               end;

               arg := arg + Ln(funval);
               IncompleteGamma := one;
               if arg >= elimit then
                   IncompleteGamma := one - exp(arg)
       end
end; { IncompleteGamma }

(*
{
Brent's algorithm for the zero of a function
Tolerance etc is global
We check that there is a change of sign between Fz(a) and Fz(b)
The function to be minimized (Fz) has two arguments:
x:    which is manipulated by Brent
args: which might or might not be needed by fx and is untouched
}

function BrentZero(Fz: BrentFn; a, b: float;
                   arglist: BrentVec; macheps, tolerance: float): float;
type
   option = (Interpolate, Extrapolate);
var
   c, d, e, fa, fb, fc, tol, m, p, q, r, s: float;
   done, exp1, exp2: boolean;
   flag: option;

begin
   SetErrorTrap('BrentZero');
   fa := Fz(a,arglist);  fb := Fz(b,arglist);
   if Sign(fa) = Sign(fb) then
      SpringErrorTrap(100,'No zero between bounds')
   else begin
      done := false;  flag := Interpolate;
      while not done do
      case flag of
         Interpolate:
         begin
            c := a;  fc := fa;  e := b - a;  d := e;
            flag := Extrapolate;
         end;

         Extrapolate:
         begin
            if abs(fc) < abs(fb) then
               begin
                  a  := b;   b  := c;    c := a;
                  fa := fb;  fb := fc;  fc := fa;
               end;

            tol := 2 * macheps * abs(b) + tolerance;
            m   := 0.5 * (c - b);

            if (abs(m) > tol) and (fb <> 0) then
               begin
                  if (abs(e) < tol) or (abs(fa) <= abs(fb)) then
                     begin
                        e := m;
                        d := e;
                     end
                  else
                     begin
                        s := fb/fa;
                        if a = c then
                           begin
                              p := 2 * m * s;
                              q := 1 - s;
                           end
                        else
                           begin
                              q := fa/fc;
                              r := fb/fc;
                              p := s * (2 * m * q * (q - r) - (b - a) * (r - 1));
                              q := (q - 1) * (r - 1) * (s - 1);
                           end;

                        if p > 0 then
                           q := -q
                        else
                           p := -p;

                        e := d;
                        s := e;
                        exp1 := (2*p) < (3*m*q - abs(tol*q));
                        exp2 := (p < abs(0.5*s*q));
                        if (exp1 and exp2) then
                           d := p/q
                        else
                           begin
                              e := m;
                              d := e;
                           end
                     end;
                  a  := b;
                  fa := fb;
                  if abs(d) > tol then
                     b := b + d
                  else
                     begin
                        if m > 0 then
                           b := b + tol
                        else
                           b := b - tol
                     end;

                  fb := Fz(b,arglist);
                  if (fb > 0) = (fc > 0) then
                     flag := Interpolate
                  else
                     flag := Extrapolate;
               end
            else
                  done := true;
         end { extrapolate }
      end { case }
   end; { main if }
   BrentZero := b;
end; { BrentZero }


*)

function ExpTest(x: float): float;
{ trap underflow }
const SMALLEST_EXPONENT = -1.0e+04;
begin
    if x > SMALLEST_EXPONENT then
       ExpTest := exp(x)
    else
       ExpTest := 0.0
end; { ExpTest }


function Gamma_ab(alpham1, beta, x: float): float;

var
    alpha: float;
    work: array[1..3] of float;

begin
    alpha := alpham1 + 1;
    work[1] := exp(-alpha*ln(beta));
    work[2] := Gamma(alpha);
    work[3] := IncompleteGamma(beta*x,alpha);
    Gamma_ab := work[1] * work[2] * work[3]
end; { end Gamma_ab }



function Gfnr(r: integer; a: float; q: integer; b, l: float): float;
var
   tmp: array[1..5] of float;
begin

   case r of
      0: begin
         if l = 0 then
            Gfnr := 0
         else
            Gfnr := exptest(-a*l + (Ln(l)*(a*q+b)))
      end;

      1: begin
         Gfnr := Gamma_ab(a*q+b,a,l)
      end;

      2: begin
         tmp[1] := Gamma_ab(a*q+b,a,l);
         tmp[2] := Gamma_ab(a*q+b+1,a,l);
         Gfnr := l*tmp[1] - tmp[2]
      end;

      3: begin
         tmp[1] := l * l * Gamma_ab(a*q+b,a,l);
         tmp[2] := 2 * l * Gamma_ab(a*q+b+1,a,l);
         tmp[3] := Gamma_ab(a*q+b+2,a,l);
         tmp[4] := tmp[1] - tmp[2] + tmp[3];
         Gfnr := tmp[4]/Gamma(3)
      end;

      4: begin
         tmp[1] := l * l * l * Gamma_ab(a*q+b  ,a,l);
         tmp[2] := 3 * l * l * Gamma_ab(a*q+b+1,a,l);
         tmp[3] := 3 * l     * Gamma_ab(a*q+b+2,a,l);
         tmp[4] :=             Gamma_ab(a*q+b+3,a,l);
         tmp[5] := tmp[1] - tmp[2] + tmp[3] - tmp[4];
         Gfnr := tmp[5]/Gamma(4)
      end
   end
end; { Gfnr }


{ Equations from Appendix B of Davis }

function Davis(m, q: integer; l: float): float;

var
   work: array[1..25] of float;

begin
   case m of
      2: begin
         work[1] := exp(-LnGamma(q - 1));
         work[2] := Gfnr(1,1  ,q,-2  ,l);
         work[3] := Gfnr(0,1/2,q,-1/2,l);
         work[4] := Gfnr(1,1/2,q,-3/2,l);
         Davis := work[1] * (work[2] - 0.5*work[3]*work[4])
         end;

      3: begin
         work[1] := (q/2 * ln(2)) + LnGamma(q/2) + LnGamma(q - 1);
         work[1] := exp(-work[1]);
         work[2] := Gfnr(1,1/2,q,-1,l);
         work[3] := Gfnr(1,1  ,q,-2,l);
         work[4] := Gfnr(0,1/2,q,-1,l);
         work[5] := Gfnr(2,1  ,q,-2,l);
         Davis := work[1] * (work[2]*work[3] - 2*work[4]*work[5])
         end;

      4: begin
         work[1] := LnGamma(q - 1) + LnGamma(q - 2);
         work[1] := exp(-work[1]);
         work[2] := Gfnr(1,1,q,-2,l) * Gfnr(1,1,q,-3,l);
         work[3] := Gfnr(0,1,q,-2,l) * Gfnr(2,1,q,-3,l);
         work[4] := Gfnr(0,1/2,q,-3/2,l) * Gfnr(1,1/2,q,-3/2,l) * Gfnr(3,1,q,-3,l);
         Davis := work[1] * (work[2] - work[3] - 0.5 * work[4])
         end;

      5: begin
         work[1] := LnGamma(0.5*q - 1) + LnGamma(q - 1) + LnGamma(q - 3);
         work[1] := (0.5*q - 1) * ln(2) + work[1];
         work[1] := exp(-work[1]);

         work[2] := Gfnr(1,1/2,q,-2,l);
         work[3] := Gfnr(1,1,  q,-2,l);
         work[4] := Gfnr(1,1,  q,-4,l);
         work[5] := work[2] * work[3] * work[4];
         work[6] := Gfnr(0,1/2,q,-1,l);
         work[7] := Gfnr(1,1,  q,-4,l);
         work[8] := Gfnr(2,1,  q,-3,l);
         work[9] := work[6] * work[7] * work[8];

         work[10] := Gfnr(0,3/2,q,-4,l);
         work[11] := Gfnr(3,1,  q,-4,l);
         work[12] := work[10]*work[11];

         work[13] := Gfnr(0,1/2,q,-2,l);
         work[14] := Gfnr(1,1,  q,-3,l);
         work[15] := Gfnr(4,1,  q,-4,l);
         work[16] := work[13] * work[14] * work[15];

         work[17] := Gfnr(0,1,  q,-3,l);
         work[18] := Gfnr(1,1/2,q,-2,l);
         work[19] := work[17] * work[18];

         work[20] := Gfnr(2,1,  q,-3,l);
         work[21] := Gfnr(3,1,  q,-4,l);
         work[22] := Gfnr(4,1,  q,-4,l);
         work[23] := work[20] + work[21] + work[22];

         work[24] := work[5] + 2 * (work[9] - work[12] - 2*work[16]);
         work[25] := work[19] * work[23];

         Davis :=  work[1] * (work[24] - work[25])
         end
   end
end; { Davis }


function Gmql(m, q: integer; l: float): float;
begin
     Gmql := Davis(m,q,l)
end; { Gmql }

function LnGmql(m, q: integer; l: float): float;
var tmp: float;
begin
     tmp := Davis(m,q,l);
     if tmp <= 0.0 then
        LnGmql := Ln(1.0e-14)
     else
        LnGmql := Ln(tmp)
end; { LnGmql }


function Gmqlpct(l: float; arglist: BrentVec): float;
var
   m, q: integer;
   p: float;

begin
   m := round(arglist[1]);
   q := round(arglist[2]);
   p := arglist[3];
   Gmqlpct := (1 - Davis(m,q,l)) - p;
end; { Gmqlpct }

{
  SMR functions
}

function MultipleIntegral(p, q, tau: integer; c: float): float;

function ChisqFun(x, v: float): float;
begin { Gauss-Laguerre alpha = 0 }
     ChisqFun := exp(x/2 + (v/2 - 1)*Ln(x))
end; { ChisqFun }

function LnChisqFun(x, v: float): float;
begin { Gauss-Laguerre alpha = 0 }
     LnChisqFun := x/2 + (v/2 - 1)*Ln(x)
end; { LnChisqFun }

function ChisqFunLegendre(x, v: float): float;
begin
     ChisqFunLegendre := exp(-x/2 + (v/2 - 1)*Ln(x))
end; { ChisqFunLegendre }

function LnChisqFunLegendre(x, v: float): float;
begin
     LnChisqFunLegendre := -x/2 + (v/2 - 1)*Ln(x)
end; { LnChisqFunLegendre }

function TinyTau(p, q, tau: integer; c: float): float;
{ Gauss-Legendre weights for tau = 1}
{ Gauss-Legendre 3 X 96 points (1.0e-16 3.0e-03 6.0e-01 4.0e+01)}

const
  glx: array[1..288] of float = (
  4.6574417525402888e-07,  2.4534362053274181e-06,  6.0272355192861771e-06,  1.1184149514455958e-05,
  1.7918810505663683e-05,  2.6224104655577212e-05,  3.6091238122394230e-05,  4.7509757305202321e-05,
  6.0467562826984267e-05,  7.4950923323441202e-05,  9.0944490370964458e-05,  1.0843131491663355e-04,
  1.2739286531874877e-04,  1.4780904702631670e-04,  1.6965822389646392e-04,  1.9291724113614894e-04,
  2.1756144984819083e-04,  2.4356473315781130e-04,  2.7089953389319355e-04,  2.9953688379137904e-04,
  3.2944643419893934e-04,  3.6059648823511697e-04,  3.9295403438348699e-04,  4.2648478147663447e-04,
  4.6115319503682757e-04,  4.9692253493420946e-04,  5.3375489432263179e-04,  5.7161123981187823e-04,
  6.1045145283372172e-04,  6.5023437215798278e-04,  6.9091783751354093e-04,  7.3245873426807414e-04,
  7.7481303911917975e-04,  8.1793586674845837e-04,  8.6178151738912064e-04,  9.0630352525670707e-04,
  9.5145470779159802e-04,  9.9718721566112879e-04,  1.0434525834683208e-03,  1.0902017811134901e-03,
  1.1373852657543021e-03,  1.1849530343092099e-03,  1.2328546764486313e-03,  1.2810394280177121e-03,
  1.3294562248340569e-03,  1.3780537568034159e-03,  1.4267805222959781e-03,  1.4755848827256465e-03,
  1.5244151172744537e-03,  1.5732194777041222e-03,  1.6219462431966843e-03,  1.6705437751660434e-03,
  1.7189605719823882e-03,  1.7671453235514690e-03,  1.8150469656908904e-03,  1.8626147342457981e-03,
  1.9097982188866101e-03,  1.9565474165317794e-03,  2.0028127843389715e-03,  2.0485452922085023e-03,
  2.0936964747433930e-03,  2.1382184826109797e-03,  2.1820641332516420e-03,  2.2251869608809205e-03,
  2.2675412657320263e-03,  2.3090821624865594e-03,  2.3497656278421175e-03,  2.3895485471663786e-03,
  2.4283887601882219e-03,  2.4662451056774682e-03,  2.5030774650658906e-03,  2.5388468049632727e-03,
  2.5735152185234660e-03,  2.6070459656166133e-03,  2.6394035117649831e-03,  2.6705535658011611e-03,
  2.7004631162087212e-03,  2.7291004661069065e-03,  2.7564352668422889e-03,  2.7824385501519092e-03,
  2.8070827588639515e-03,  2.8303417761036363e-03,  2.8521909529737833e-03,  2.8726071346813513e-03,
  2.8915686850834667e-03,  2.9090555096291356e-03,  2.9250490766766588e-03,  2.9395324371731162e-03,
  2.9524902426948979e-03,  2.9639087618777062e-03,  2.9737758953445230e-03,  2.9820811894944368e-03,
  2.9888158504856443e-03,  2.9939727644808138e-03,  2.9975465637947728e-03,  2.9995342558248464e-03,
  3.0926830908556413e-03,  3.4882338048402572e-03,  4.1994198683180106e-03,  5.2256457533568779e-03,
  6.5658432906072761e-03,  8.2185968264401055e-03,  1.0182156386336794e-02,  1.2454441703715624e-02,
  1.5033045002550371e-02,  1.7915233741345349e-02,  2.1097953583802564e-02,  2.4577831668390837e-02,
  2.8351180198411929e-02,  3.2414000358218065e-02,  3.6761986555377490e-02,  4.1390530986074980e-02,
  4.6294728519771455e-02,  5.1469381898386124e-02,  5.6909007244727389e-02,  6.2607839874466470e-02,
  6.8559840405571171e-02,  7.4758701158770730e-02,  8.1197852842296581e-02,  8.7870471513833176e-02,
  9.4769485812311788e-02,  1.0188758445189103e-01,  1.0921722397018732e-01,  1.1675063672254762e-01,
  1.2447983911389474e-01,  1.3239664005942295e-01,  1.4049264966517930e-01,  1.4875928811933170e-01,
  1.5718779478470199e-01,  1.6576923748292871e-01,  1.7449452196042078e-01,  1.8335440152607080e-01,
  1.9233948685051439e-01,  2.0144025591655129e-01,  2.1064706411018283e-01,  2.1995015444157182e-01,
  2.2933966788509375e-01,  2.3880565382752067e-01,  2.4833808061326584e-01,  2.5792684617551326e-01,
  2.6756178874196623e-01,  2.7723269760386898e-01,  2.8692932393688914e-01,  2.9664139166239351e-01,
  3.0635860833760648e-01,  3.1607067606311084e-01,  3.2576730239613100e-01,  3.3543821125803375e-01,
  3.4507315382448672e-01,  3.5466191938673414e-01,  3.6419434617247931e-01,  3.7366033211490624e-01,
  3.8304984555842814e-01,  3.9235293588981712e-01,  4.0155974408344869e-01,  4.1066051314948560e-01,
  4.1964559847392918e-01,  4.2850547803957917e-01,  4.3723076251707127e-01,  4.4581220521529796e-01,
  4.5424071188066828e-01,  4.6250735033482071e-01,  4.7060335994057700e-01,  4.7852016088610527e-01,
  4.8624936327745238e-01,  4.9378277602981269e-01,  5.0111241554810892e-01,  5.0823051418768816e-01,
  5.1512952848616678e-01,  5.2180214715770346e-01,  5.2824129884122928e-01,  5.3444015959442881e-01,
  5.4039216012553348e-01,  5.4609099275527262e-01,  5.5153061810161386e-01,  5.5670527148022853e-01,
  5.6160946901392506e-01,  5.6623801344462255e-01,  5.7058599964178192e-01,  5.7464881980158800e-01,
  5.7842216833160909e-01,  5.8190204641619747e-01,  5.8508476625865469e-01,  5.8796695499744955e-01,
  5.9054555829628441e-01,  5.9281784361366319e-01,  5.9478140317355987e-01,  5.9643415670939270e-01,
  5.9777435424664316e-01,  5.9880058013168203e-01,  5.9951176619515967e-01,  5.9990731690914434e-01,
  6.0611677350035720e-01,  6.3222179549532243e-01,  6.7915769315197849e-01,  7.4688516362187940e-01,
  8.3533371130641143e-01,  9.4440990780861256e-01,  1.0739982606728127e+00,  1.2239614792736973e+00,
  1.3941406584597722e+00,  1.5843554596465808e+00,  1.7944043068707245e+00,  2.0240646025705189e+00,
  2.2730929645183089e+00,  2.5412254842777102e+00,  2.8281780071723190e+00,  3.1336464335868612e+00,
  3.4573070413383533e+00,  3.7988168288047142e+00,  4.1578138784627470e+00,  4.5339177404589286e+00,
  4.9267298358115674e+00,  5.3358338788200452e+00,  5.7607963182353199e+00,  6.2011667967253388e+00,
  6.6564786281492214e+00,  7.1262492921348528e+00,  7.6099809454361509e+00,  8.1071609495282697e+00,
  8.6172624138818321e+00,  9.1397447543404766e+00,  9.6740542660101596e+00,  1.0219624710053047e+01,
  1.0775877913764253e+01,  1.1342224383295463e+01,  1.1918063928376181e+01,  1.2502786298370502e+01,
  1.3095771828995423e+01,  1.3696392099015281e+01,  1.4304010596216422e+01,  1.4917983391956334e+01,
  1.5537659823572353e+01,  1.6162383183926828e+01,  1.6791491417357914e+01,  1.7424317821298530e+01,
  1.8060191752819883e+01,  1.8698439339350816e+01,  1.9338384192819820e+01,  1.9979348126462821e+01,
  2.0620651873537181e+01,  2.1261615807180181e+01,  2.1901560660649185e+01,  2.2539808247180119e+01,
  2.3175682178701472e+01,  2.3808508582642087e+01,  2.4437616816073174e+01,  2.5062340176427647e+01,
  2.5682016608043668e+01,  2.6295989403783580e+01,  2.6903607900984721e+01,  2.7504228171004577e+01,
  2.8097213701629499e+01,  2.8681936071623820e+01,  2.9257775616704539e+01,  2.9824122086235747e+01,
  3.0380375289946954e+01,  3.0925945733989842e+01,  3.1460255245659525e+01,  3.1982737586118169e+01,
  3.2492839050471730e+01,  3.2990019054563852e+01,  3.3473750707865150e+01,  3.3943521371850778e+01,
  3.4398833203274663e+01,  3.4839203681764680e+01,  3.5264166121179954e+01,  3.5673270164188438e+01,
  3.6066082259541076e+01,  3.6442186121537254e+01,  3.6801183171195291e+01,  3.7142692958661648e+01,
  3.7466353566413140e+01,  3.7771821992827682e+01,  3.8058774515722291e+01,  3.8326907035481696e+01,
  3.8575935397429483e+01,  3.8805595693129277e+01,  3.9015644540353421e+01,  3.9205859341540233e+01,
  3.9376038520726304e+01,  3.9526001739327185e+01,  3.9655590092191389e+01,  3.9764666288693590e+01,
  3.9853114836378126e+01,  3.9920842306848023e+01,  3.9967778204504683e+01,  3.9993883226499648e+01);

  glw: array[1..288] of float = (
  1.1951880983281774e-06,  2.7809411807298013e-06,  4.3660977267835826e-06,  5.9468315076532958e-06,
  7.5213041143884821e-06,  9.0878182563530245e-06,  1.0644706186730385e-05,  1.2190315388547625e-05,
  1.3723006846174663e-05,  1.5241155802512163e-05,  1.6743153149757191e-05,  1.8227407006631912e-05,
  1.9692344350441632e-05,  2.1136412658471591e-05,  2.2558081540491552e-05,  2.3955844353842504e-05,
  2.5328219796366931e-05,  2.6673753474066909e-05,  2.7991019441116350e-05,  2.9278621710216525e-05,
  3.0535195731498946e-05,  3.1759409838285812e-05,  3.2949966658115423e-05,  3.4105604487492945e-05,
  3.5225098628888208e-05,  3.6307262688545791e-05,  3.7350949833724192e-05,  3.8355054008022787e-05,
  3.9318511103507226e-05,  4.0240300088386250e-05,  4.1119444089042528e-05,  4.1955011425271096e-05,
  4.2746116594880168e-05,  4.3491921223790855e-05,  4.4191634935759207e-05,  4.4844516203422475e-05,
  4.5449873130491808e-05,  4.6007064184993029e-05,  4.6515498879134391e-05,  4.6974638395079429e-05,
  4.7383996155963087e-05,  4.7743138341544702e-05,  4.8051684347951779e-05,  4.8309307191027967e-05,
  4.8515733852856601e-05,  4.8670745571093294e-05,  4.8774178070801327e-05,  4.8825921738543131e-05,
  4.8825921738543131e-05,  4.8774178070801327e-05,  4.8670745571093294e-05,  4.8515733852856601e-05,
  4.8309307191027967e-05,  4.8051684347951779e-05,  4.7743138341544702e-05,  4.7383996155963087e-05,
  4.6974638395079429e-05,  4.6515498879134391e-05,  4.6007064184993029e-05,  4.5449873130491808e-05,
  4.4844516203422475e-05,  4.4191634935759207e-05,  4.3491921223790855e-05,  4.2746116594880168e-05,
  4.1955011425271096e-05,  4.1119444089042528e-05,  4.0240300088386250e-05,  3.9318511103507226e-05,
  3.8355054008022787e-05,  3.7350949833724192e-05,  3.6307262688545791e-05,  3.5225098628888208e-05,
  3.4105604487492945e-05,  3.2949966658115423e-05,  3.1759409838285812e-05,  3.0535195731498946e-05,
  2.9278621710216525e-05,  2.7991019441116350e-05,  2.6673753474066909e-05,  2.5328219796366931e-05,
  2.3955844353842504e-05,  2.2558081540491552e-05,  2.1136412658471591e-05,  1.9692344350441632e-05,
  1.8227407006631912e-05,  1.6743153149757191e-05,  1.5241155802512163e-05,  1.3723006846174663e-05,
  1.2190315388547625e-05,  1.0644706186730385e-05,  9.0878182563530245e-06,  7.5213041143884821e-06,
  5.9468315076532958e-06,  4.3660977267835826e-06,  2.7809411807298013e-06,  1.1951880983281774e-06,
  2.3784243156731524e-04,  5.5340729496524885e-04,  8.6885344762996190e-04,  1.1834194700230452e-03,
  1.4967395187633580e-03,  1.8084758330143124e-03,  2.1182965311594172e-03,  2.4258727623210582e-03,
  2.7308783623888489e-03,  3.0329900047000218e-03,  3.3318874768017920e-03,  3.6272539943198712e-03,
  3.9187765257380153e-03,  4.2061461190359868e-03,  4.4890582265579683e-03,  4.7672130264148176e-03,
  5.0403157394771870e-03,  5.3080769413394917e-03,  5.5702128687823392e-03,  5.8264457203332830e-03,
  6.0765039505684933e-03,  6.3201225578190870e-03,  6.5570433649651877e-03,  6.7870152930113222e-03,
  7.0097946271489870e-03,  7.2251452750208538e-03,  7.4328390169113622e-03,  7.6326557475967886e-03,
  7.8243837095981986e-03,  8.0078197175891316e-03,  8.1827693737197352e-03,  8.3490472736292270e-03,
  8.5064772023814364e-03,  8.6548923235346686e-03,  8.7941353522163757e-03,  8.9240587244813693e-03,
  9.0445247529681722e-03,  9.1554057728139189e-03,  9.2565842769480513e-03,  9.3479530406211167e-03,
  9.4294152350369691e-03,  9.5008845299677114e-03,  9.5622851852427224e-03,  9.6135521310148856e-03,
  9.6546310367187863e-03,  9.6854783686478874e-03,  9.7060614360897877e-03,  9.7163584259704061e-03,
  9.7163584259704061e-03,  9.7060614360897877e-03,  9.6854783686478874e-03,  9.6546310367187863e-03,
  9.6135521310148856e-03,  9.5622851852427224e-03,  9.5008845299677114e-03,  9.4294152350369691e-03,
  9.3479530406211167e-03,  9.2565842769480513e-03,  9.1554057728139189e-03,  9.0445247529681722e-03,
  8.9240587244813693e-03,  8.7941353522163757e-03,  8.6548923235346686e-03,  8.5064772023814364e-03,
  8.3490472736292270e-03,  8.1827693737197352e-03,  8.0078197175891316e-03,  7.8243837095981986e-03,
  7.6326557475967886e-03,  7.4328390169113622e-03,  7.2251452750208538e-03,  7.0097946271489870e-03,
  6.7870152930113222e-03,  6.5570433649651877e-03,  6.3201225578190870e-03,  6.0765039505684933e-03,
  5.8264457203332830e-03,  5.5702128687823392e-03,  5.3080769413394917e-03,  5.0403157394771870e-03,
  4.7672130264148176e-03,  4.4890582265579683e-03,  4.2061461190359868e-03,  3.9187765257380153e-03,
  3.6272539943198712e-03,  3.3318874768017920e-03,  3.0329900047000218e-03,  2.7308783623888489e-03,
  2.4258727623210582e-03,  2.1182965311594172e-03,  1.8084758330143124e-03,  1.4967395187633580e-03,
  1.1834194700230452e-03,  8.6885344762996190e-04,  5.5340729496524885e-04,  2.3784243156731524e-04,
  1.5696803691377256e-02,  3.6523027506919270e-02,  5.7341416811759631e-02,  7.8101720467182556e-02,
  9.8779794035638691e-02,  1.1935334643344038e-01,  1.3980047458573039e-01,  1.6009947543626415e-01,
  1.8022882324643325e-01,  2.0016717953966642e-01,  2.1989341136681845e-01,  2.3938661202044043e-01,
  2.5862612246914207e-01,  2.7759155291460280e-01,  2.9626280423179890e-01,  3.1462008918047535e-01,
  3.3264395332563007e-01,  3.5031529562609043e-01,  3.6761538866000698e-01,  3.8452589846085655e-01,
  4.0102890394036622e-01,  4.1710691587616755e-01,  4.3274289544326366e-01,  4.4792027226908893e-01,
  4.6262296199274722e-01,  4.7683538330958397e-01,  4.9054247448292743e-01,  5.0372970930538274e-01,
  5.1638311249274549e-01,  5.2848927449415706e-01,  5.4003536570277655e-01,  5.5100915005191209e-01,
  5.6139899794611159e-01,  5.7119389873913895e-01,  5.8038347215632358e-01,  5.8895797947163475e-01,
  5.9690833378047903e-01,  6.0422610962959533e-01,  6.1090355194598533e-01,  6.1693358425539702e-01,
  6.2230981618166925e-01,  6.2702655021897458e-01,  6.3107878776978776e-01,  6.3446223444218852e-01,
  6.3717330460087129e-01,  6.3920912516704653e-01,  6.4056753866321214e-01,  6.4124710549955444e-01,
  6.4124710549955444e-01,  6.4056753866321214e-01,  6.3920912516704653e-01,  6.3717330460087129e-01,
  6.3446223444218852e-01,  6.3107878776978776e-01,  6.2702655021897458e-01,  6.2230981618166925e-01,
  6.1693358425539702e-01,  6.1090355194598533e-01,  6.0422610962959533e-01,  5.9690833378047903e-01,
  5.8895797947163475e-01,  5.8038347215632358e-01,  5.7119389873913895e-01,  5.6139899794611159e-01,
  5.5100915005191209e-01,  5.4003536570277655e-01,  5.2848927449415706e-01,  5.1638311249274549e-01,
  5.0372970930538274e-01,  4.9054247448292743e-01,  4.7683538330958397e-01,  4.6262296199274722e-01,
  4.4792027226908893e-01,  4.3274289544326366e-01,  4.1710691587616755e-01,  4.0102890394036622e-01,
  3.8452589846085655e-01,  3.6761538866000698e-01,  3.5031529562609043e-01,  3.3264395332563007e-01,
  3.1462008918047535e-01,  2.9626280423179890e-01,  2.7759155291460280e-01,  2.5862612246914207e-01,
  2.3938661202044043e-01,  2.1989341136681845e-01,  2.0016717953966642e-01,  1.8022882324643325e-01,
  1.6009947543626415e-01,  1.3980047458573039e-01,  1.1935334643344038e-01,  9.8779794035638691e-02,
  7.8101720467182556e-02,  5.7341416811759631e-02,  3.6523027506919270e-02,  1.5696803691377256e-02);

var npts, i: integer;
    g, sum, l, inner, outer, product: float;

begin
    g := tau/2*ln(2) + LnGamma(tau/2);
    npts := 288;
    sum := 0.0;
    for i := 1 to npts do
       begin
       l       := c*glx[i]/tau;
       inner   := LnGmql(p,q,l);
       outer   := Ln(glw[i]) + LnChisqFunLegendre(glx[i],tau);
       product := inner + outer - g;
       sum     := sum + exp(product)
       end;

    TinyTau := sum;
end; { TinyTau }

function SmallTau(p, q, tau: integer; c: float): float;
{ Gauss-Legendre 96 points (1.0e-08 1.0e-01 4.4e+01)}

const
  glxlower: array96 = (
  1.5534804285975701e-05,  8.1791198662785336e-05,  2.0091783054874968e-04,  3.7281494653136626e-04,
  5.9730362378943025e-04,  8.7414673443557411e-04,  1.2030511504390468e-03,  1.5836684184709279e-03,
  2.0155952260043214e-03,  2.4983738609416981e-03,  3.0314927092139343e-03,  3.6143868024468423e-03,
  4.2464384193122082e-03,  4.9269777415105603e-03,  5.6552835643515625e-03,  6.4305840614777010e-03,
  7.2520576030650902e-03,  8.1188336267081981e-03,  9.0299935601049625e-03,  9.9845717945866788e-03,
  1.0981556708473554e-02,  1.2019891739179327e-02,  1.3098476502933214e-02,  1.4216167960935680e-02,
  1.5371781630714100e-02,  1.6564092841395740e-02,  1.7791838031568662e-02,  1.9053716088355769e-02,
  2.0348389726283219e-02,  2.1674486904482232e-02,  2.3030602280722665e-02,  2.4415298700737498e-02,
  2.5827108721260050e-02,  2.7264536165159958e-02,  2.8726057707029913e-02,  3.0210124487542817e-02,
  3.1715163754868624e-02,  3.3239580531411336e-02,  3.4781759304099900e-02,  3.6340065736441607e-02,
  3.7912848400523780e-02,  3.9498440527128191e-02,  4.1095161772103483e-02,  4.2701319997123725e-02,
  4.4315213062945953e-02,  4.5935130633266201e-02,  4.7559355987262436e-02,  4.9186167838903574e-02,
  5.0813842161096426e-02,  5.2440654012737564e-02,  5.4064879366733799e-02,  5.5684796937054047e-02,
  5.7298690002876275e-02,  5.8904848227896517e-02,  6.0501569472871809e-02,  6.2087161599476220e-02,
  6.3659944263558393e-02,  6.5218250695900093e-02,  6.6760429468588664e-02,  6.8284846245131370e-02,
  6.9789885512457184e-02,  7.1273952292970094e-02,  7.2735473834840039e-02,  7.4172901278739947e-02,
  7.5584711299262503e-02,  7.6969407719277336e-02,  7.8325523095517768e-02,  7.9651620273716778e-02,
  8.0946293911644235e-02,  8.2208171968431332e-02,  8.3435917158604267e-02,  8.4628228369285907e-02,
  8.5783842039064320e-02,  8.6901533497066780e-02,  8.7980118260820667e-02,  8.9018453291526439e-02,
  9.0015438205413328e-02,  9.0970016439895038e-02,  9.1881176373291795e-02,  9.2747952396934910e-02,
  9.3569425938522299e-02,  9.4344726435648438e-02,  9.5073032258489440e-02,  9.5753571580687785e-02,
  9.6385623197553158e-02,  9.6968517290786066e-02,  9.7501636139058295e-02,  9.7984414773995679e-02,
  9.8416341581529065e-02,  9.8796958849560954e-02,  9.9125863265564426e-02,  9.9402706376210570e-02,
  9.9627195053468634e-02,  9.9799092169451251e-02,  9.9918218801337222e-02,  9.9984475195714018e-02);

  glwlower: array96 = (
  3.9839599293646924e-05,  9.2698030087859205e-05,  1.4553657633913187e-04,  1.9822769709901147e-04,
  2.5071011207527741e-04,  3.0292724491905014e-04,  3.5482350407533739e-04,  4.0634380565054984e-04,
  4.5743351579581457e-04,  5.0803847594656974e-04,  5.5810504918141462e-04,  6.0758017279639409e-04,
  6.5641141270692850e-04,  7.0454701816103445e-04,  7.5193597615613847e-04,  7.9852806527529565e-04,
  8.4427390878485996e-04,  8.8912502688974851e-04,  9.3303388806717806e-04,  9.7595395941184446e-04,
  1.0178397559326799e-03,  1.0586468887448630e-03,  1.0983321121039954e-03,  1.1368533692311211e-03,
  1.1741698368793174e-03,  1.2102419685940248e-03,  1.2450315366210154e-03,  1.2785016724172890e-03,
  1.3106169057219145e-03,  1.3413432021452531e-03,  1.3706479992366498e-03,  1.3985002409923786e-03,
  1.4248704106756647e-03,  1.4497305624866729e-03,  1.4730543505532398e-03,  1.4948170572990785e-03,
  1.5149956195168674e-03,  1.5335686528096051e-03,  1.5505164742528686e-03,  1.5658211232539054e-03,
  1.5794663805855018e-03,  1.5914377855744154e-03,  1.6017226514261653e-03,  1.6103100786699623e-03,
  1.6171909667094947e-03,  1.6223580234673454e-03,  1.6258057731128384e-03,  1.6275305618650864e-03,
  1.6275305618650864e-03,  1.6258057731128384e-03,  1.6223580234673454e-03,  1.6171909667094947e-03,
  1.6103100786699623e-03,  1.6017226514261653e-03,  1.5914377855744154e-03,  1.5794663805855018e-03,
  1.5658211232539054e-03,  1.5505164742528686e-03,  1.5335686528096051e-03,  1.5149956195168674e-03,
  1.4948170572990785e-03,  1.4730543505532398e-03,  1.4497305624866729e-03,  1.4248704106756647e-03,
  1.3985002409923786e-03,  1.3706479992366498e-03,  1.3413432021452531e-03,  1.3106169057219145e-03,
  1.2785016724172890e-03,  1.2450315366210154e-03,  1.2102419685940248e-03,  1.1741698368793174e-03,
  1.1368533692311211e-03,  1.0983321121039954e-03,  1.0586468887448630e-03,  1.0178397559326799e-03,
  9.7595395941184446e-04,  9.3303388806717806e-04,  8.8912502688974851e-04,  8.4427390878485996e-04,
  7.9852806527529565e-04,  7.5193597615613847e-04,  7.0454701816103445e-04,  6.5641141270692850e-04,
  6.0758017279639409e-04,  5.5810504918141462e-04,  5.0803847594656974e-04,  4.5743351579581457e-04,
  4.0634380565054984e-04,  3.5482350407533739e-04,  3.0292724491905014e-04,  2.5071011207527741e-04,
  1.9822769709901147e-04,  1.4553657633913187e-04,  9.2698030087859205e-05,  3.9839599293646924e-05);

  glxupper: array96 = (
  1.0681538976308502e-01,  1.3590194980316284e-01,  1.8819854643075828e-01,  2.6366138789341065e-01,
  3.6221192706475591e-01,  4.8374606479182702e-01,  6.2813511785625664e-01,  7.9522611523135112e-01,
  9.8484200270010191e-01,  1.1967818446315945e+00,  1.4308210424270236e+00,  1.6867115749453241e+00,
  1.9641822624962906e+00,  2.2629390548170427e+00,  2.5826653430168740e+00,  2.9230222952909415e+00,
  3.2836492161105006e+00,  3.6641639285412957e+00,  4.0641631793024011e+00,  4.4832230661458610e+00,
  4.9208994871098426e+00,  5.3767286111725880e+00,  5.8502273698104190e+00,  6.3408939689401613e+00,
  6.8482084207043350e+00,  7.3716330945360422e+00,  7.9106132869199737e+00,  8.4645778092459665e+00,
  9.0329395931322942e+00,  9.6150963125773341e+00,  1.0210431022280355e+01,  1.0818312811455046e+01,
  1.1438097472442911e+01,  1.2069128183418043e+01,  1.2710736204459755e+01,  1.3362241586255458e+01,
  1.4022953890682716e+01,  1.4692172922506874e+01,  1.5369189471418807e+01,  1.6053286063626473e+01,
  1.6743737722203711e+01,  1.7439812735390550e+01,  1.8140773432030773e+01,  1.8845876963325011e+01,
  1.9554376090070882e+01,  2.0265519974555861e+01,  2.0978554976263709e+01,  2.1692725450551215e+01,
  2.2407274549448786e+01,  2.3121445023736293e+01,  2.3834480025444140e+01,  2.4545623909929120e+01,
  2.5254123036674990e+01,  2.5959226567969228e+01,  2.6660187264609451e+01,  2.7356262277796290e+01,
  2.8046713936373528e+01,  2.8730810528581195e+01,  2.9407827077493128e+01,  3.0077046109317287e+01,
  3.0737758413744544e+01,  3.1389263795540245e+01,  3.2030871816581957e+01,  3.2661902527557089e+01,
  3.3281687188544957e+01,  3.3889568977719648e+01,  3.4484903687422666e+01,  3.5067060406867711e+01,
  3.5635422190754035e+01,  3.6189386713080026e+01,  3.6728366905463957e+01,  3.7251791579295670e+01,
  3.7759106031059844e+01,  3.8249772630189582e+01,  3.8723271388827413e+01,  3.9179100512890159e+01,
  3.9616776933854140e+01,  4.0035836820697597e+01,  4.0435836071458709e+01,  4.0816350783889504e+01,
  4.1176977704709060e+01,  4.1517334656983124e+01,  4.1837060945182955e+01,  4.2135817737503714e+01,
  4.2413288425054674e+01,  4.2669178957572981e+01,  4.2903218155368407e+01,  4.3115157997299903e+01,
  4.3304773884768650e+01,  4.3471864882143748e+01,  4.3616253935208178e+01,  4.3737788072935246e+01,
  4.3836338612106587e+01,  4.3911801453569240e+01,  4.3964098050196839e+01,  4.3993184610236916e+01);

  glwupper: array96 = (
  1.7489585838869580e-02,  4.0694439278014111e-02,  6.3890563401935219e-02,  8.7021967728662802e-02,
  1.1006175020722180e-01,  1.3298507381797037e-01,  1.5576753386582648e-01,  1.7838494851908621e-01,
  2.0081333351569591e-01,  2.2302891324343543e-01,  2.4500814109145508e-01,  2.6672772253038918e-01,
  2.8816463899480549e-01,  3.0929617190231123e-01,  3.3009992654253739e-01,  3.5055385571124031e-01,
  3.7063628302018176e-01,  3.9032592583719211e-01,  4.0960191782168287e-01,  4.2844383102618278e-01,
  4.4683169753761615e-01,  4.6474603063359787e-01,  4.8216784543043845e-01,  4.9907867900033004e-01,
  5.1546060993608123e-01,  5.3129627734240448e-01,  5.4656889923351559e-01,  5.6126229031741881e-01,
  5.7536087914800826e-01,  5.8884972462673846e-01,  6.0171453183634238e-01,  6.1394166718982091e-01,
  6.2551817283843392e-01,  6.3643178057482741e-01,  6.4667092455996467e-01,  6.5622475377677070e-01,
  6.6508314347621900e-01,  6.7323670590708717e-01,  6.8067680026468924e-01,  6.8739554184801854e-01,
  6.9338581041561631e-01,  6.9864125773129404e-01,  7.0315631429171788e-01,  7.0692619522873290e-01,
  7.0994690538015859e-01,  7.1221524352368892e-01,  7.1372880576941655e-01,  7.1448598810737163e-01,
  7.1448598810737163e-01,  7.1372880576941655e-01,  7.1221524352368892e-01,  7.0994690538015859e-01,
  7.0692619522873290e-01,  7.0315631429171788e-01,  6.9864125773129404e-01,  6.9338581041561631e-01,
  6.8739554184801854e-01,  6.8067680026468924e-01,  6.7323670590708717e-01,  6.6508314347621900e-01,
  6.5622475377677070e-01,  6.4667092455996467e-01,  6.3643178057482741e-01,  6.2551817283843392e-01,
  6.1394166718982091e-01,  6.0171453183634238e-01,  5.8884972462673846e-01,  5.7536087914800826e-01,
  5.6126229031741881e-01,  5.4656889923351559e-01,  5.3129627734240448e-01,  5.1546060993608123e-01,
  4.9907867900033004e-01,  4.8216784543043845e-01,  4.6474603063359787e-01,  4.4683169753761615e-01,
  4.2844383102618278e-01,  4.0960191782168287e-01,  3.9032592583719211e-01,  3.7063628302018176e-01,
  3.5055385571124031e-01,  3.3009992654253739e-01,  3.0929617190231123e-01,  2.8816463899480549e-01,
  2.6672772253038918e-01,  2.4500814109145508e-01,  2.2302891324343543e-01,  2.0081333351569591e-01,
  1.7838494851908621e-01,  1.5576753386582648e-01,  1.3298507381797037e-01,  1.1006175020722180e-01,
  8.7021967728662802e-02,  6.3890563401935219e-02,  4.0694439278014111e-02,  1.7489585838869580e-02);

var
    i, npts: integer;
    l, g, sum, inner, outer, product: float;

begin
    g := tau/2*ln(2) + LnGamma(tau/2);
    npts := 96;
    sum := 0.0;
    for i := 1 to npts do { lower part }
       begin
       l       := c*glxlower[i]/tau;
       inner   := LnGmql(p,q,l);
       outer   := Ln(glwlower[i]) + LnChisqFunLegendre(glxlower[i],tau);
       product := inner + outer - g;
       sum     := sum + exp(product)
       end;

    for i := 1 to npts do { upper part }
       begin
       l       := c*glxupper[i]/tau;
       inner   := LnGmql(p,q,l);
       outer   := Ln(glwupper[i]) + LnChisqFunLegendre(glxupper[i],tau);
       product := inner + outer - g;
       sum := sum + exp(product)
       end;

    SmallTau := sum
end; { SmallTau }

function MediumTau(p, q, tau: integer; c: float): float;
{ Gauss-Laguerre weights }
const
   glx: array96 = (
        1.4982473862797630e-002, 7.8946123048800110e-002, 1.9403943619415309e-001, 3.6031849940301536e-001,
        5.7783059971144790e-001, 8.4663433340836880e-001, 1.1668015752788004e+000, 1.5384179352029561e+000,
        1.9615829778382872e+000, 2.4364104013990180e+000, 2.9630282193904693e+000, 3.5415789580835448e+000,
        4.1722198744791807e+000, 4.8551231970872921e+000, 5.5904763910528059e+000, 6.3784824489169134e+000,
        7.2193602082647406e+000, 8.1133446975619687e+000, 9.0606875115786689e+000, 1.0061657217920368e+001,
        1.1116539796327311e+001, 1.2225639112560643e+001, 1.3389277428867983e+001, 1.4607795953212266e+001,
        1.5881555429656903e+001, 1.7210936772530591e+001, 1.8596341747247472e+001, 2.0038193700936485e+001,
        2.1536938346340015e+001, 2.3093044602780189e+001, 2.4707005498365575e+001, 2.6379339138025454e+001,
        2.8110589742419663e+001, 2.9901328763283963e+001, 3.1752156081341955e+001, 3.3663701293552073e+001,
        3.5636625097171340e+001, 3.7671620778917152e+001, 3.9769415818406571e+001, 4.1930773616063341e+001,
        4.4156495356822951e+001, 4.6447422022255019e+001, 4.8804436565181973e+001, 5.1228466262530610e+001,
        5.3720485264039461e+001, 5.6281517356596900e+001, 5.8912638966445790e+001, 6.1614982424312103e+001,
        6.4389739521759253e+001, 6.7238165390809257e+001, 7.0161582743195794e+001, 7.3161386510628020e+001,
        7.6239048933276436e+001, 7.9396125150498250e+001, 8.2634259355789894e+001, 8.5955191587319689e+001,
        8.9360765236439903e+001, 9.2852935369656137e+001, 9.6433777975079863e+001, 1.0010550026295192e+002,
        1.0387045217208401e+002, 1.0773113926088293e+002, 1.1169023719409228e+002, 1.1575060807590457e+002,
        1.1991531892845600e+002, 1.2418766267424256e+002, 1.2857118205471409e+002, 1.3306969700919888e+002,
        1.3768733615365946e+002, 1.4242857314463936e+002, 1.4729826889966063e+002, 1.5230172088426704e+002,
        1.5744472098579493e+002, 1.6273362389978385e+002, 1.6817542849200797e+002, 1.7377787531794405e+002,
        1.7954956445549479e+002, 1.8550009914428216e+002, 1.9164026258848975e+002, 1.9798223791899625e+002,
        2.0453988511337843e+002, 2.1132909426116800e+002, 2.1836824295658661e+002, 2.2567879852346945e+002,
        2.3328612622783123e+002, 2.4122059803677632e+002, 2.4951915306252911e+002, 2.5822756081641921e+002,
        2.6740382415709860e+002, 2.7712352531608184e+002, 2.8748869682640986e+002, 2.9864361369930475e+002,
        3.1080567968618624e+002, 3.2433445041231465e+002, 3.3992140931073067e+002, 3.5935766828583974e+002);
   glw: array96 = (
        3.7878576219050789e-002, 8.2719906098695437e-002, 1.1586679913381732e-001, 1.3383230013214018e-001,
        1.3643330361647266e-001, 1.2628621203563664e-001, 1.0769248887979736e-001, 8.5324129111580257e-002,
        6.3142032425217445e-002, 4.3798382308337221e-002, 2.8546448879553685e-002, 1.7512866194981446e-002,
        1.0125647967596877e-002, 5.5227025997542757e-003, 2.8434084753549411e-003, 1.3826116758439636e-003,
        6.3516477171739931e-004, 2.7573996998787929e-004, 1.1313616189049638e-004, 4.3875183098013215e-005,
        1.6082397760724039e-005, 5.5714800483348639e-006, 1.8240205636508853e-006, 5.6423468574705391e-007,
        1.6488229499854233e-007, 4.5506013933716987e-008, 1.1858354666076244e-008, 2.9167956106813406e-009,
        6.7696116836719112e-010, 1.4819499836703339e-010, 3.0587004517378600e-011, 5.9495123132094805e-012,
        1.0900841006155038e-012, 1.8804063918285797e-013, 3.0522549840680226e-014, 4.6592577331620562e-015,
        6.6845736377435776e-016, 9.0076248365652840e-017, 1.1392756456457428e-017, 1.3514961973993149e-018,
        1.5025758407269327e-019, 1.5643840201992124e-020, 1.5239352071253503e-021, 1.3877670300200895e-022,
        1.1802752794172979e-023, 9.3655729231494963e-025, 6.9265012876891204e-026, 4.7691560402894637e-027,
        3.0535883693639189e-028, 1.8158763395675411e-029, 1.0016239729606744e-030, 5.1176440544320763e-032,
        2.4185378322197742e-033, 1.0555712006884389e-034, 4.2478548465303382e-036, 1.5734512604770794e-037,
        5.3548530878626416e-039, 1.6711413862360260e-040, 4.7726385928402934e-042, 1.2446154232721064e-043,
        2.9568746250610146e-045, 6.3837270537895036e-047, 1.2491323725684104e-048, 2.2090419771352369e-050,
        3.5199864956783733e-052, 5.0373518882812915e-054, 6.4515324170647604e-056, 7.3667911735811350e-058,
        7.4691524628392380e-060, 6.6944639727781350e-062, 5.2786047053175396e-064, 3.6425104071069071e-066,
        2.1870947493415249e-068, 1.1354926714502651e-070, 5.0621957528008073e-073, 1.9230945557151118e-075,
        6.1726197815265932e-078, 1.6581163669347245e-080, 3.6880782851087063e-083, 6.7110039069268175e-086,
        9.8541871009329730e-089, 1.1494072769098331e-091, 1.0458167774934100e-094, 7.2669524190186217e-098,
        3.7608310089872087e-101, 1.4067947939056708e-104, 3.6675043999190463e-108, 6.3696566139181253e-112,
        6.9609778479771960e-116, 4.4438836811383874e-120, 1.4993336611853096e-124, 2.3211258953012600e-129,
        1.3332838377056502e-134, 2.0026002659658398e-140, 4.0287862132504645e-147, 1.9574149519692192e-155);
var
    g, sum, l: float;
    inner, outer, product: array96;
    npts, i: integer;

begin
    g := tau/2*ln(2) + LnGamma(tau/2);
    npts := 96;
    sum := 0.0;
    for i := 1 to npts do
       begin
       l := c*glx[i]/tau;
       inner[i] := Gmql(p,q,l);
       outer[i] := glw[i] * ChisqFun(glx[i],tau);
       product[i] := inner[i] * outer[i];
       sum := sum + product[i]
       end;
    MediumTau := sum/exp(g)
end; { MediumTau }


function LargeTau(p, q, tau: integer; c: float): float;
{ Gauss-Legendre 96 points (1.0000000000e-082.0000000000e+022.0000000000e+03)}

const
  glxlower: array96 = (
  3.1049621675379058e-02,  1.6356242367365326e-01,  4.0181571125899040e-01,  7.4560997758646863e-01,
  1.1945873769778927e+00,  1.7482736536111219e+00,  2.4060825513660546e+00,  3.1673171635152215e+00,
  4.0311708649241922e+00,  4.9967282313064061e+00,  6.0629660344213363e+00,  7.2287543374076932e+00,
  8.4928576974855616e+00,  9.8539364779220762e+00,  1.1310548269192438e+01,  1.2861149418427303e+01,
  1.4504096665814657e+01,  1.6237648886369414e+01,  1.8059968935303829e+01,  1.9969125595087476e+01,
  2.1963095622158534e+01,  2.4039765891133271e+01,  2.6196935634250153e+01,  2.8432318773681629e+01,
  3.0743546344245672e+01,  3.3128169003951982e+01,  3.5583659629724124e+01,  3.8107415995547775e+01,
  4.0696763530207967e+01,  4.3348958151692841e+01,  4.6061189175261198e+01,  4.8830582292091705e+01,
  5.1654202615357661e+01,  5.4529057790499252e+01,  5.7452101166397348e+01,  6.0420235024088136e+01,
  6.3430313859597128e+01,  6.6479147717413497e+01,  6.9563505571072199e+01,  7.2680118747261076e+01,
  7.5825684389824715e+01,  7.8996868959993435e+01,  8.2190311769128627e+01,  8.5402628540240173e+01,
  8.8630414994501891e+01,  9.1870250458963937e+01,  9.5118701491639101e+01,  9.8372325520121095e+01,
  1.0162767448987891e+02,  1.0488129851836091e+02,  1.0812974955103607e+02,  1.1136958501549812e+02,
  1.1459737146975984e+02,  1.1780968824087138e+02,  1.2100313105000657e+02,  1.2417431562017529e+02,
  1.2731988126273893e+02,  1.3043649443892781e+02,  1.3352085229258651e+02,  1.3656968615040287e+02,
  1.3957976498591188e+02,  1.4254789884360267e+02,  1.4547094221950076e+02,  1.4834579739464235e+02,
  1.5116941771790829e+02,  1.5393881083473880e+02,  1.5665104185830717e+02,  1.5930323647979205e+02,
  1.6189258401445224e+02,  1.6441634038027587e+02,  1.6687183100604801e+02,  1.6925645366575435e+02,
  1.7156768123631838e+02,  1.7380306437574984e+02,  1.7596023411886674e+02,  1.7803690438784147e+02,
  1.8003087441491255e+02,  1.8194003107469618e+02,  1.8376235112363059e+02,  1.8549590334418536e+02,
  1.8713885059157269e+02,  1.8868945174080756e+02,  1.9014606353207793e+02,  1.9150714231251445e+02,
  1.9277124567259233e+02,  1.9393703397557869e+02,  1.9500327177869360e+02,  1.9596882914507580e+02,
  1.9683268284648477e+02,  1.9759391745863394e+02,  1.9825172635638887e+02,  1.9880541263302212e+02,
  1.9925439003241354e+02,  1.9959818429874102e+02,  1.9983643758632635e+02,  1.9996895038832463e+02);

  glwlower: array96 = (
  7.9679206551230536e-02,  1.8539607870605646e-01,  2.9107318177102820e-01,  3.9645543382374349e-01,
  5.0142027426751123e-01,  6.0585455039326253e-01,  7.0964707907990032e-01,  8.1268769252923434e-01,
  9.1486712303259787e-01,  1.0160770534500410e+00,  1.1162102099280395e+00,  1.2151604670480767e+00,
  1.3128229566305114e+00,  1.4090941771610317e+00,  1.5038721026242934e+00,  1.5970562901763674e+00,
  1.6885479863400910e+00,  1.7782502315156075e+00,  1.8660679626478487e+00,  1.9519081139169048e+00,
  2.0356797153315469e+00,  2.1172939891132598e+00,  2.1966644437646017e+00,  2.2737069657192532e+00,
  2.3483399084752086e+00,  2.4204841791154426e+00,  2.4900633221238593e+00,  2.5570036004070875e+00,
  2.6212340734361743e+00,  2.6826866724250387e+00,  2.7412962724658616e+00,  2.7970007615449832e+00,
  2.8497411061829521e+00,  2.8994614147745139e+00,  2.9461089955700732e+00,  2.9896344134121162e+00,
  3.0299915418813885e+00,  3.0671376121796143e+00,  3.1010332584540108e+00,  3.1316425595154840e+00,
  3.1589330769063642e+00,  3.1828758892772755e+00,  3.2034456230367199e+00,  3.2206204792409410e+00,
  3.2343822566954956e+00,  3.2447163712440918e+00,  3.2516118712242830e+00,  3.2550614490735641e+00,
  3.2550614490735641e+00,  3.2516118712242830e+00,  3.2447163712440918e+00,  3.2343822566954956e+00,
  3.2206204792409410e+00,  3.2034456230367199e+00,  3.1828758892772755e+00,  3.1589330769063642e+00,
  3.1316425595154840e+00,  3.1010332584540108e+00,  3.0671376121796143e+00,  3.0299915418813885e+00,
  2.9896344134121162e+00,  2.9461089955700732e+00,  2.8994614147745139e+00,  2.8497411061829521e+00,
  2.7970007615449832e+00,  2.7412962724658616e+00,  2.6826866724250387e+00,  2.6212340734361743e+00,
  2.5570036004070875e+00,  2.4900633221238593e+00,  2.4204841791154426e+00,  2.3483399084752086e+00,
  2.2737069657192532e+00,  2.1966644437646017e+00,  2.1172939891132598e+00,  2.0356797153315469e+00,
  1.9519081139169048e+00,  1.8660679626478487e+00,  1.7782502315156075e+00,  1.6885479863400910e+00,
  1.5970562901763674e+00,  1.5038721026242934e+00,  1.4090941771610317e+00,  1.3128229566305114e+00,
  1.2151604670480767e+00,  1.1162102099280395e+00,  1.0160770534500410e+00,  9.1486712303259787e-01,
  8.1268769252923434e-01,  7.0964707907990032e-01,  6.0585455039326253e-01,  5.0142027426751123e-01,
  3.9645543382374349e-01,  2.9107318177102820e-01,  1.8539607870605646e-01,  7.9679206551230536e-02);

  glxupper: array96 = (
  2.0027944650509232e+02,  2.0147206172313645e+02,  2.0361634131151163e+02,  2.0671048970861364e+02,
  2.1075128630333847e+02,  2.1573446279328675e+02,  2.2165474287337713e+02,  2.2850585438306223e+02,
  2.3628053769613166e+02,  2.4497055399400608e+02,  2.5456669422252037e+02,  2.6505878894992213e+02,
  2.7643571919119177e+02,  2.8868542821573294e+02,  3.0179493433782159e+02,  3.1575034468163312e+02,
  3.3053686990885865e+02,  3.4613883989463159e+02,  3.6253972033586149e+02,  3.7972213027477335e+02,
  3.9766786051931012e+02,  4.1635789294101721e+02,  4.3577242063003996e+02,  4.5589086888592908e+02,
  4.7669191702204557e+02,  4.9815352096047548e+02,  5.2025293659352963e+02,  5.4296674388707822e+02,
  5.6627087170018513e+02,  5.9014062329474257e+02,  6.1455070250807830e+02,  6.3947524056079908e+02,
  6.6488782347146321e+02,  6.9076152004903133e+02,  7.1706891043342955e+02,  7.4378211515398220e+02,
  7.7087282467491775e+02,  7.9831232939663710e+02,  8.2607155008095333e+02,  8.5412106866805573e+02,
  8.8243115945254397e+02,  9.1097182058548947e+02,  9.3971280586914327e+02,  9.6862365681059271e+02,
  9.9767373490040063e+02,  1.0268322540820170e+03,  1.0560683133775553e+03,  1.0853509296353573e+03,
  1.1146490703646427e+03,  1.1439316866224447e+03,  1.1731677459179830e+03,  1.2023262650995994e+03,
  1.2313763431894072e+03,  1.2602871941308567e+03,  1.2890281794145105e+03,  1.3175688405474559e+03,
  1.3458789313319442e+03,  1.3739284499190467e+03,  1.4016876706033629e+03,  1.4291271753250821e+03,
  1.4562178848460178e+03,  1.4829310895665703e+03,  1.5092384799509687e+03,  1.5351121765285368e+03,
  1.5605247594392008e+03,  1.5854492974919217e+03,  1.6098593767052575e+03,  1.6337291282998149e+03,
  1.6570332561129217e+03,  1.6797470634064703e+03,  1.7018464790395246e+03,  1.7233080829779544e+03,
  1.7441091311140708e+03,  1.7642275793699600e+03,  1.7836421070589827e+03,  1.8023321394806899e+03,
  1.8202778697252265e+03,  1.8374602796641384e+03,  1.8538611601053685e+03,  1.8694631300911415e+03,
  1.8842496553183669e+03,  1.8982050656621784e+03,  1.9113145717842672e+03,  1.9235642808088082e+03,
  1.9349412110500780e+03,  1.9454333057774797e+03,  1.9550294460059940e+03,  1.9637194623038683e+03,
  1.9714941456169377e+03,  1.9783452571266230e+03,  1.9842655372067134e+03,  1.9892487136966615e+03,
  1.9932895102913863e+03,  1.9963836586884884e+03,  1.9985279382768636e+03,  1.9997205534949076e+03);

  glwupper: array96 = (
  7.1711285899693045e-01,  1.6685647084379363e+00,  2.6196586360702367e+00,  3.5680989045920968e+00,
  4.5127824686332403e+00,  5.4526909538119970e+00,  6.3868237120384439e+00,  7.3141892331288192e+00,
  8.2338041077050725e+00,  9.1446934815076037e+00,  1.0045891889854650e+01,  1.0936444203979512e+01,
  1.1815406610265374e+01,  1.2681847595083378e+01,  1.3534848924295384e+01,  1.4373506612305983e+01,
  1.5196931877820665e+01,  1.6004252084440679e+01,  1.6794611664670370e+01,  1.7567173026130501e+01,
  1.8321117438899979e+01,  1.9055645902972124e+01,  1.9769979994869914e+01,  2.0463362692496450e+01,
  2.1135059177333630e+01,  2.1784357613128204e+01,  2.2410569900235267e+01,  2.3013032404814439e+01,
  2.3591106662105126e+01,  2.4144180053032557e+01,  2.4671666453426340e+01,  2.5173006855163500e+01,
  2.5647669956928954e+01,  2.6095152734275384e+01,  2.6514980961456409e+01,  2.6906709722054384e+01,
  2.7269923878295995e+01,  2.7604238510996741e+01,  2.7909299327481566e+01,  2.8184783037048597e+01,
  2.8430397693578801e+01,  2.8645883004927775e+01,  2.8831010608772033e+01,  2.8985584314617750e+01,
  2.9109440311714934e+01,  2.9202447342656949e+01,  2.9264506842481772e+01,  2.9295553043126855e+01,
  2.9295553043126855e+01,  2.9264506842481772e+01,  2.9202447342656949e+01,  2.9109440311714934e+01,
  2.8985584314617750e+01,  2.8831010608772033e+01,  2.8645883004927775e+01,  2.8430397693578801e+01,
  2.8184783037048597e+01,  2.7909299327481566e+01,  2.7604238510996741e+01,  2.7269923878295995e+01,
  2.6906709722054384e+01,  2.6514980961456409e+01,  2.6095152734275384e+01,  2.5647669956928954e+01,
  2.5173006855163500e+01,  2.4671666453426340e+01,  2.4144180053032557e+01,  2.3591106662105126e+01,
  2.3013032404814439e+01,  2.2410569900235267e+01,  2.1784357613128204e+01,  2.1135059177333630e+01,
  2.0463362692496450e+01,  1.9769979994869914e+01,  1.9055645902972124e+01,  1.8321117438899979e+01,
  1.7567173026130501e+01,  1.6794611664670370e+01,  1.6004252084440679e+01,  1.5196931877820665e+01,
  1.4373506612305983e+01,  1.3534848924295384e+01,  1.2681847595083378e+01,  1.1815406610265374e+01,
  1.0936444203979512e+01,  1.0045891889854650e+01,  9.1446934815076037e+00,  8.2338041077050725e+00,
  7.3141892331288192e+00,  6.3868237120384439e+00,  5.4526909538119970e+00,  4.5127824686332403e+00,
  3.5680989045920968e+00,  2.6196586360702367e+00,  1.6685647084379363e+00,  7.1711285899693045e-01);

var
    i, npts: integer;
    l, g, sum, inner, outer, product: float;


begin
    g := tau/2*ln(2) + LnGamma(tau/2);
    npts := 96;
    sum := 0.0;
    for i := 1 to npts do { lower part }
       begin
       l       := c*glxlower[i]/tau;
       inner   := LnGmql(p,q,l);
       outer   := Ln(glwlower[i]) + LnChisqFunLegendre(glxlower[i],tau);
       product := inner + outer - g;
       sum     := sum + exp(product)
       end;

    for i := 1 to npts do { upper part }
       begin
       l       := c*glxupper[i]/tau;
       inner   := LnGmql(p,q,l);
       outer   := Ln(glwupper[i]) + LnChisqFunLegendre(glxupper[i],tau);
       product := inner + outer - g;
       sum     := sum + exp(product)
       end;

    LargeTau := sum
end; { LargeTau }

begin
     if tau = 1 then
        MultipleIntegral := TinyTau(p, q, tau, c)
     else if (tau = 2) or (tau = 3) then
        MultipleIntegral := SmallTau(p, q, tau, c)
     else if tau <= 250 then
        MultipleIntegral := MediumTau(p, q, tau, c)
     else
        MultipleIntegral := LargeTau(p, q, tau, c)
end; { MultipleIntegral }

{
  SMR functions to be called
}

function Smrpct(l: float; arglist: BrentVec): float;
var
   p, q, tau: integer;
   a: float;

begin
   p   := round(arglist[1]);
   q   := round(arglist[2]);
   tau := round(arglist[3]);
   a   := arglist[4];
   Smrpct := (1 - MultipleIntegral(p,q,tau,l)) - a;
end; { Smrpct }

function SmrCriticalValue(p, q, tau: integer; a: float): float;
var
   arglist: BrentVec;
   zerofn: BrentFn;
   lowerlimit, upperlimit: float;

begin
     if tau = 0 then { infinity df error }
        begin
        arglist[1] := p;  arglist[2] := q;  arglist[3] := a;
        zerofn := Gmqlpct;
        SmrCriticalValue := BrentZero(zerofn,1.0,2000.0,arglist,1.0e-16,1.0e-08);
        end
     else
        begin
        lowerlimit := SmrCriticalValue(p,q,0,a);
        if tau > 350 then { upperlimit from tau = 250 }
           begin
           arglist[1] := p;    arglist[2] := q;
           arglist[3] := 250;  arglist[4] := a;
           zerofn := Smrpct;
           upperlimit := BrentZero(zerofn,lowerlimit,50.0,arglist,1.0e-16,1.0e-08)
           end
        else if tau = 1 then
           upperlimit := 1.0e+07
        else if tau = 2 then
           upperlimit := 2.0e+04
        else
           upperlimit := 2.0e+03;

        arglist[1] := p;    arglist[2] := q;
        arglist[3] := tau;  arglist[4] := a;
        zerofn := Smrpct;
        SmrCriticalValue := BrentZero(zerofn,lowerlimit,upperlimit,arglist,1.0e-16,1.0e-08);
        end
end; { SmrCriticalValue }

function SmrPercentile(p, q, tau: integer; a: float): float;
begin
   if tau = 0 then { Wishart/infinity df }
      SmrPercentile := 1 - Davis(p,q,a)
   else
      SmrPercentile := 1 - MultipleIntegral(p,q,tau,a)
end; { SmrPercentile }

{ tau = 0 is used when you want df = infinity                   }
{ Wishart find alpha for CV: alpha := SmrPercentile(p,q,tau,cv) }
{ Wishart find CV for alpha: cv := SmrCriticalValue(p,q,0,alpha)}
{ SMR find alpha for CV: alpha := SmrPercentile(p,q,tau,alpha)  }
{ SMR find CV for alpha: cv := SmrCriticalValue(p,q,tau,alpha)  }

end.
